/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.16).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.fms.api;

import com.fms.model.Event;
import com.fms.model.NonParticipated;
import com.fms.model.Unregistered;
import com.fasterxml.jackson.databind.ObjectMapper;
import io.swagger.annotations.*;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import javax.validation.constraints.*;
import java.io.IOException;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2020-01-28T17:34:25.877+05:30[Asia/Calcutta]")
@Api(value = "event", description = "the event API")
public interface EventApi {

    Logger log = LoggerFactory.getLogger(EventApi.class);

    default Optional<ObjectMapper> getObjectMapper(){
        return Optional.empty();
    }

    default Optional<HttpServletRequest> getRequest(){
        return Optional.empty();
    }

    default Optional<String> getAcceptHeader() {
        return getRequest().map(r -> r.getHeader("Accept"));
    }

    @ApiOperation(value = "To add the event", nickname = "addEvent", notes = "Put the Event details in the body", response = Event.class, tags={ "EventsAndDashboard", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = Event.class),
        @ApiResponse(code = 201, message = "Created"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/event",
        produces = { "*/*" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<Event> addEvent(@ApiParam(value = "" ,required=true )  @Valid @RequestBody Event body
) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\r\n  \"base_location\" : \"base_location\",\r\n  \"pocid\" : \"pocid\",\r\n  \"total_volunteer_hour\" : 1,\r\n  \"pocname\" : \"pocname\",\r\n  \"rating\" : 5,\r\n  \"lives_impacted\" : 9,\r\n  \"dislikes\" : \"dislikes\",\r\n  \"volunteers\" : 7,\r\n  \"total_volunteers\" : 5,\r\n  \"event_id\" : 0,\r\n  \"venue_address\" : \"venue_address\",\r\n  \"month\" : \"month\",\r\n  \"total_travel_hour\" : 6,\r\n  \"bname\" : \"bname\",\r\n  \"event_date\" : \"2000-01-23\",\r\n  \"council_name\" : \"council_name\",\r\n  \"event_name\" : \"event_name\",\r\n  \"pocnumber\" : \"pocnumber\",\r\n  \"event_status\" : \"event_status\",\r\n  \"likes\" : \"likes\",\r\n  \"avgrating\" : 2,\r\n  \"ovlhrs\" : \"ovlhrs\"\r\n}", Event.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default EventApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "Delete the event ", nickname = "deleteEvent", notes = "Provide the event id to deleted", tags={ "EventsAndDashboard", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK"),
        @ApiResponse(code = 204, message = "No Content"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden") })
    @RequestMapping(value = "/event/{eventId}",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> deleteEvent(@ApiParam(value = "",required=true) @PathVariable("eventId") Integer eventId
) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default EventApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "To update the event details", nickname = "editEventUsingPUT", notes = "Put the updated event details in the body", response = Event.class, tags={ "EventsAndDashboard", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = Event.class),
        @ApiResponse(code = 201, message = "Created"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/event",
        produces = { "*/*" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Event> editEventUsingPUT(@ApiParam(value = "" ,required=true )  @Valid @RequestBody Event body
) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\r\n  \"base_location\" : \"base_location\",\r\n  \"pocid\" : \"pocid\",\r\n  \"total_volunteer_hour\" : 1,\r\n  \"pocname\" : \"pocname\",\r\n  \"rating\" : 5,\r\n  \"lives_impacted\" : 9,\r\n  \"dislikes\" : \"dislikes\",\r\n  \"volunteers\" : 7,\r\n  \"total_volunteers\" : 5,\r\n  \"event_id\" : 0,\r\n  \"venue_address\" : \"venue_address\",\r\n  \"month\" : \"month\",\r\n  \"total_travel_hour\" : 6,\r\n  \"bname\" : \"bname\",\r\n  \"event_date\" : \"2000-01-23\",\r\n  \"council_name\" : \"council_name\",\r\n  \"event_name\" : \"event_name\",\r\n  \"pocnumber\" : \"pocnumber\",\r\n  \"event_status\" : \"event_status\",\r\n  \"likes\" : \"likes\",\r\n  \"avgrating\" : 2,\r\n  \"ovlhrs\" : \"ovlhrs\"\r\n}", Event.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default EventApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "Provide all the events", nickname = "getAllEvents", notes = "All the events are fetched", response = Event.class, responseContainer = "List", tags={ "EventsAndDashboard", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = Event.class, responseContainer = "List"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/event",
        produces = { "*/*" }, 
        method = RequestMethod.GET)
    default Flux<ResponseEntity<List<Event>>> getAllEvents() throws IOException {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                return Flux.just(new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED));
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default EventApi interface so no example is generated");
        }
        return Flux.just(new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED));
    }


    @ApiOperation(value = "Find the event by id", nickname = "getEventById", notes = "Provide an id to look up for specific event", response = Event.class, tags={ "EventsAndDashboard", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = Event.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/event/{eventId}",
        produces = { "*/*" }, 
        method = RequestMethod.GET)
    default ResponseEntity<Event> getEventById(@ApiParam(value = "",required=true) @PathVariable("eventId") Integer eventId
) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\r\n  \"base_location\" : \"base_location\",\r\n  \"pocid\" : \"pocid\",\r\n  \"total_volunteer_hour\" : 1,\r\n  \"pocname\" : \"pocname\",\r\n  \"rating\" : 5,\r\n  \"lives_impacted\" : 9,\r\n  \"dislikes\" : \"dislikes\",\r\n  \"volunteers\" : 7,\r\n  \"total_volunteers\" : 5,\r\n  \"event_id\" : 0,\r\n  \"venue_address\" : \"venue_address\",\r\n  \"month\" : \"month\",\r\n  \"total_travel_hour\" : 6,\r\n  \"bname\" : \"bname\",\r\n  \"event_date\" : \"2000-01-23\",\r\n  \"council_name\" : \"council_name\",\r\n  \"event_name\" : \"event_name\",\r\n  \"pocnumber\" : \"pocnumber\",\r\n  \"event_status\" : \"event_status\",\r\n  \"likes\" : \"likes\",\r\n  \"avgrating\" : 2,\r\n  \"ovlhrs\" : \"ovlhrs\"\r\n}", Event.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default EventApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "NonParticipated details", nickname = "getNonParticipatedDetails", notes = "Fetch the details for the event page", response = NonParticipated.class, tags={ "EventsAndDashboard", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = NonParticipated.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/event/nonparticipated/{eventId}",
        produces = { "*/*" }, 
        method = RequestMethod.GET)
    default ResponseEntity<NonParticipated> getNonParticipatedDetails(@ApiParam(value = "",required=true) @PathVariable("eventId") Integer eventId
) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\r\n  \"base_location\" : \"base_location\",\r\n  \"empid\" : \"empid\",\r\n  \"event_id\" : 0,\r\n  \"bname\" : \"bname\",\r\n  \"event_date\" : \"2000-01-23\",\r\n  \"event_name\" : \"event_name\"\r\n}", NonParticipated.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default EventApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "UnRegistered details", nickname = "getUnregisteredDetails", notes = "Fetch the details for the event page", response = Unregistered.class, tags={ "EventsAndDashboard", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = Unregistered.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/event/unregistered/{eventId}",
        produces = { "*/*" }, 
        method = RequestMethod.GET)
    default ResponseEntity<Unregistered> getUnregisteredDetails(@ApiParam(value = "",required=true) @PathVariable("eventId") Integer eventId
) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\r\n  \"base_location\" : \"base_location\",\r\n  \"empid\" : \"empid\",\r\n  \"event_id\" : 0,\r\n  \"bname\" : \"bname\",\r\n  \"event_date\" : \"2000-01-23\",\r\n  \"event_name\" : \"event_name\"\r\n}", Unregistered.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default EventApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }

}
